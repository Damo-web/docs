(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{231:function(t,a,s){t.exports=s.p+"assets/img/ci_1.ee4e59df.png"},232:function(t,a,s){t.exports=s.p+"assets/img/ci_2.4970cdf7.png"},233:function(t,a,s){t.exports=s.p+"assets/img/ci_3.13c78901.png"},234:function(t,a,s){t.exports=s.p+"assets/img/ci_4.27ee65b9.png"},235:function(t,a,s){t.exports=s.p+"assets/img/ci_5.86b67aca.png"},236:function(t,a,s){t.exports=s.p+"assets/img/ci_6.a24c864f.png"},362:function(t,a,s){"use strict";s.r(a);var n=s(2),e=Object(n.a)({},function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"ci-cd"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ci-cd","aria-hidden":"true"}},[t._v("#")]),t._v(" CI / CD")]),t._v(" "),n("blockquote",[n("p",[t._v("CI / CD（ Continuous Integration / Continuous Deployment ）是一种通过在应用开发阶段引入自动化来加快应用交付的方法。CI / CD 主要由持续集成、持续交付和持续部署三部分构成，由于持续交付和持续部署只存在发布阶段是否自动化的区别，因此本文中，CI / CD 主要指持续集成及持续部署。")])]),t._v(" "),n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),n("p",[t._v("传统模式中，前端负责制作静态页面，后端负责将静态页面嵌入进 PHP、JSP、ASP 等模板引擎中并提供 Web 服务，集成及部署时，动态资源和静态资源全部耦合在一起，前后端项目部署在同一物理机器上。")]),t._v(" "),n("p",[t._v("云服务时代，前端提供单页面应用（ SPA ），后端通过 Web 服务提供 HTTP API，集成及部署时，前后端项目分离部署，再通过 Docker 分发到相应的云端机器上。")]),t._v(" "),n("h2",{attrs:{id:"工作流"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工作流","aria-hidden":"true"}},[t._v("#")]),t._v(" 工作流")]),t._v(" "),n("p",[n("img",{attrs:{src:s(231),alt:""}})]),t._v(" "),n("p",[t._v("如上图所示：")]),t._v(" "),n("ul",[n("li",[t._v("持续集成（CI）是在源代码变更后自动检测、拉取、构建并进行单元测试及集成测试的过程。")])]),t._v(" "),n("p",[n("img",{attrs:{src:s(232),alt:""}})]),t._v(" "),n("ul",[n("li",[t._v("持续部署（CD）是在持续集成的基础上，以自动化方式，频繁而且持续性的，将应用部署到生产环境的过程。")])]),t._v(" "),n("p",[n("img",{attrs:{src:s(233),alt:""}})]),t._v(" "),n("h2",{attrs:{id:"核心概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#核心概念","aria-hidden":"true"}},[t._v("#")]),t._v(" 核心概念")]),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("阅前说明")]),t._v(" "),n("p",[t._v("在熟悉及上手 CI 工具时，需要简单了解下其核心概念。")]),t._v(" "),n("p",[t._v("以下概念均以 NodeJS 做演示说明，分为工作流、配置及触发器三大部分。")])]),t._v(" "),n("ul",[n("li",[n("p",[n("strong",[t._v("Workflow")])]),t._v(" "),n("p",[t._v("CI 工具中，通常利用 "),n("code",[t._v(".yml")]),t._v(" 及 "),n("code",[t._v(".xml")]),t._v(" 文件来描述工作流。")]),t._v(" "),n("p",[t._v("工作流一般由以下四个部分组成（在不同 CI 工具里会有对应调整）：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("Task")]),t._v(" "),n("p",[n("strong",[t._v("单个任务的描述")])]),t._v(" "),n("p",[t._v("通常为单行命令，如下：")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[t._v("Step")]),t._v(" "),n("p",[n("strong",[t._v("单(多)个任务的集合")])]),t._v(" "),n("p",[t._v("通常为单(多)行命令的集合，并依次执行，而且只要单个命令失败，剩余的命令将不再执行，如下：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 以 circleci 为例")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("steps")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" install\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),n("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n      node -v\n      yarn -v\n      yarn install")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[t._v("Job")]),t._v(" "),n("p",[n("strong",[t._v("单(多)个步骤的集合")])]),t._v(" "),n("p",[t._v("通常为单(多)个步骤的集合，并依次执行，而且只要单个步骤失败，剩余的步骤将不再执行，如下：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 以 circleci 为例")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("jobs")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("build")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("working_directory")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ~/repo\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("docker")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" circleci/node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("latest\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("steps")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" checkout\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" install\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),n("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n            node -v\n            yarn -v\n            yarn install")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[t._v("Pipline")]),t._v(" "),n("p",[n("strong",[t._v("单(多)个工作的集合")])]),t._v(" "),n("p",[t._v("通常为单(多)个工作的集合，并依次执行，而且只要单个工作失败，剩余的工作将不再执行，如下：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在 circleci 中， Pipline 即为其 Workflow")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("jobs")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("build")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("docker")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" circleci/node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("latest\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("steps")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" checkout\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" install\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),n("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n            node -v\n            yarn -v\n            yarn install")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" build\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),n("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n            yarn build")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("docker")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" circleci/node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("latest\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("steps")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" checkout\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),n("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n            yarn test")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("workflows")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("main-workflow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("jobs")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("build")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("requires")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# test will not run until the `build` job is completed.")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" build\n")])])])])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("Setting")])]),t._v(" "),n("p",[t._v("配置主要提供环境变量及加密信息：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("Environment Variables")]),t._v(" "),n("p",[t._v("环境变量为开发者在配置中定义的变量，可以在执行命令时获取对应的值，一般分为公共变量和私有变量两种，公共变量一般直接暴露在 "),n("code",[t._v(".yml")]),t._v(" 文件中或存储于同级目录下的"),n("code",[t._v(".env")]),t._v(" 文件中，私有变量一般在仓库配置项中进行配置，通常用于私密性信息的存储，并且只对该仓库生效。")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 以 .travis.yml 为例")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# GH_TOKEN 为存储在仓库配置项中的环境变量，如下图所示配置")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# GH_REF 为存储在 .travis.yml 中的环境变量")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("language")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" node_js\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("node_js")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" stable\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("install")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" yarn install\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" yarn build\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("after_script")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" git add A\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" git commit "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('m "deploy"\n  '),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" git push "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('f "https'),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("GH_TOKEN"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("@$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("GH_REF"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v('" master'),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("gh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("pages\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("env")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("global")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("GH_REF")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" github.com/Damo/demo.git\n")])])]),n("p",[n("img",{attrs:{src:s(234),alt:""}})])]),t._v(" "),n("li",[n("p",[t._v("Encrypted Secrets")]),t._v(" "),n("p",[t._v("加密信息一般用于保障信息的传递过程，CI / CD 构建发布过程中，通常需要一些敏感信息，如 Github 及 Gitlab 的 Personal access tokens，DB 的用户名及密码，Git 仓库的 SSH Keys 等。")]),t._v(" "),n("p",[t._v("在加密过程中，我们可以利用 CI 平台自身的加密工具来进行加密，比如利用 travis encrypt 命令加密 Slack 信息，如下：")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# slackDomain:k4RhBu6TpTLBdQ1hPTKMSglB#web-notification 为需要加密信息")]),t._v("\ntravis encrypt "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"slackdomain:k4RhBu6TpTLBdQ1hPTKMSglB#web-notification"')]),t._v(" --pro\n")])])]),n("p",[t._v("可以利用第三方加密工具来进行加密，比如利用 ssh-keygen 命令生成 SSH keys，如下：")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一路回车即可生成")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成后，查询公钥 cat id_rsa.pub")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成后，查询私钥 cat id_rsa")]),t._v("\nssh-keygen\n")])])]),n("p",[t._v("当加密信息过多时，也可以采用 "),n("a",{attrs:{href:"https://www.vaultproject.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vault"),n("OutboundLink")],1),t._v(" 来进行管理。")])])])]),t._v(" "),n("li",[n("p",[t._v("Trigger")]),t._v(" "),n("p",[t._v("触发器是 CI / CD 服务器执行构建操作行为的依据，有以下三种方式：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("Webhook Push")]),t._v(" "),n("p",[t._v("推送是最常用的 CI / CD 触发器，通常与 Webhook 结合使用。")]),t._v(" "),n("p",[t._v("通俗来讲，Webhook 是让一个网站（订阅者）订阅另一个网站（发布者）特定事件的方法，以 Github 为例，通常 CI / CD 服务器会订阅 Github Rep Webhook，当源代码分支触发 push 或 pull request 事件时，Github Rep Webhook 就会通过 HTTP Service 通知 CI / CD 服务器进行构建操作。")])]),t._v(" "),n("li",[n("p",[t._v("Poll SCM（ Software Configuration Management ）")]),t._v(" "),n("p",[t._v("定时轮询 Git SCM 或 Webhook ，一旦源代码变动，则启动构建。")])]),t._v(" "),n("li",[n("p",[t._v("Build Periodically")]),t._v(" "),n("p",[t._v("不论源代码是否有变动，定期启动构建，通常情况下，一般不采用这种构建方式。")])])])])]),t._v(" "),n("h2",{attrs:{id:"工具链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工具链","aria-hidden":"true"}},[t._v("#")]),t._v(" 工具链")]),t._v(" "),n("p",[t._v("常用的 CI 工具如下：")]),t._v(" "),n("ul",[n("li",[n("p",[n("a",{attrs:{href:"https://travis-ci.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Travis CI"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("基于 Ruby 开发，只适用于 Github 仓库，开源项目可免费使用")])]),t._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://circleci.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Circle CI"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("基于 Clojure 开发，适用于 Github 及 Bitbucket 仓库，仅提供一个 Linux容器免费使用")])]),t._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://jenkins.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Jenkins CI"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("基于 Java 开发，适用于所有 Git 仓库，项目开源，插件丰富，生态完善")])]),t._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://drone.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Drone CI"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("基于 Go 开发，适用于所有 Git 仓库，项目开源，原生容器支持，体积轻巧，构建速度快")])]),t._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://docs.gitlab.com/ee/ci/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gitlab CI"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("基于 Ruby 开发，只适用于 Gitlab 仓库，社区版本免费使用")])])]),t._v(" "),n("p",[t._v("综上所述，中小团队推荐使用 Drone CI 来实现 CI / CD 工作流，中大型团队推荐使用 Jenkins CI 来实现 CI / CD 工作流，Github 开源项目推荐使用 Travis CI 及 Circle CI 来实现 CI / CD 工作流，Gitlab 项目推荐使用 Gitlab CI 来实现 CI / CD 工作流。")]),t._v(" "),n("h2",{attrs:{id:"构建速度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#构建速度","aria-hidden":"true"}},[t._v("#")]),t._v(" 构建速度")]),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("评测注意事项")]),t._v(" "),n("p",[t._v("代码仓库为 GitHub 仓库，利用 Slack 通知机制，Gitlab CI 不在评测范围内")]),t._v(" "),n("p",[t._v("Jenkins 版本号为 2.164.3，Drone 版本号为 1.0")]),t._v(" "),n("p",[t._v("Circle 及 Travis 版本号为截至2019年5月的线上版本")])]),t._v(" "),n("p",[t._v("CI 工具的构建速度可参考下图：")]),t._v(" "),n("p",[n("img",{attrs:{src:s(235),alt:""}})]),t._v(" "),n("p",[t._v("需要说明的是，Drone CI、Circle CI 及 Travis CI 都是基于 Docker 构建，未做  node_modules 缓存；Jenkins CI 未基于 Docker 构建，默认缓存         node_modules 。")]),t._v(" "),n("p",[t._v("关闭 Jenkins CI 的 node_modules 缓存，各 CI 工具构建速度如下：")]),t._v(" "),n("p",[n("img",{attrs:{src:s(236),alt:""}})]),t._v(" "),n("p",[t._v("可以发现，基于容器化方案的 Drone CI 和 Circle CI 在构建速度上不相伯仲，Jenkins CI 次之，而采用容器化方案的 Travis CI 稍逊色。")]),t._v(" "),n("h2",{attrs:{id:"参考链接"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考链接","aria-hidden":"true"}},[t._v("#")]),t._v(" 参考链接")]),t._v(" "),n("ul",[n("li",[n("p",[n("a",{attrs:{href:"https://www.zhihu.com/question/23444990",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何理解持续集成、持续交付、持续部署？"),n("OutboundLink")],1)])]),t._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://avnpc.com/pages/drone-gitflow-kubernetes-for-cloud-native-ci",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker 容器环境下的持续集成最佳实践：构建基于 Drone + GitFlow + K8s 的云原生语义化 CI 工作流"),n("OutboundLink")],1)])]),t._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://www.mindtheproduct.com/2016/02/what-the-hell-are-ci-cd-and-devops-a-cheatsheet-for-the-rest-of-us/",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Product Managers’ Guide to Continuous Delivery and DevOps"),n("OutboundLink")],1)])]),t._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://circleci.com/docs/2.0/workflows/?mkt_tok=eyJpIjoiWm1VMU16Z3pNak5qWVdJeCIsInQiOiJqNmlWMXYzZmVJUGVMdWo4MXU1aWwzK1wvc2ZoNUl4YmJxTFwvbGVLaEF0cFwvS1dYaGN0YWRWNW1VUEhYMGdmSStYTXo2cGgxY3ZFc1U1R0pTZ3l3U2hVZlFrK3d2NzFHSDl0WTU5ak1XejYxcFI5N1BLbk1TdERhcVpOSGhIV2NqWSJ9",target:"_blank",rel:"noopener noreferrer"}},[t._v("Using Workflows to Schedule Jobs"),n("OutboundLink")],1)])]),t._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Webhook",target:"_blank",rel:"noopener noreferrer"}},[t._v("Webhook - Wikipedia"),n("OutboundLink")],1)])]),t._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://developer.github.com/webhooks/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Webhooks | GitHub Developer Guide"),n("OutboundLink")],1)])])])])},[],!1,null,null,null);a.default=e.exports}}]);